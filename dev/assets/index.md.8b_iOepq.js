import{_ as a,c as s,o as i,a7 as e}from"./chunks/framework.BgRT6GGQ.js";const g=JSON.parse('{"title":"AliasTables","description":"","frontmatter":{},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":null}'),l={name:"index.md"},t=e(`<h1 id="AliasTables" tabindex="-1">AliasTables <a class="header-anchor" href="#AliasTables" aria-label="Permalink to &quot;AliasTables {#AliasTables}&quot;">​</a></h1><p><a href="https://github.com/LilithHafner/AliasTables.jl" target="_blank" rel="noreferrer">AliasTables</a> provides the <a href="/dev/index#AliasTables.AliasTable"><code>AliasTable</code></a> type, which is an object that defines a probability distribution over <code>1:n</code> for some <code>n</code>. They are efficient to construct and very efficient to sample from.</p><h2 id="Constructing-an-AliasTable" tabindex="-1">Constructing an AliasTable <a class="header-anchor" href="#Constructing-an-AliasTable" aria-label="Permalink to &quot;Constructing an AliasTable {#Constructing-an-AliasTable}&quot;">​</a></h2><p>Construct an AliasTable by calling <a href="/dev/index#AliasTables.AliasTable"><code>AliasTable(probabilities)</code></a> for some collection of probabilities. For example, to create a table with a 30% chance of returning 1, and a 70% chance of returning 2, you would call <code>AliasTable([0.3, 0.7])</code>.</p><p><code>probabilities</code> may be a vector, or any other iterator. Its elements may be Float64, or any other real number. The sum need not be 1 as the input will be automatically normalized.</p><h2 id="Sampling-from-an-AliasTable" tabindex="-1">Sampling from an AliasTable <a class="header-anchor" href="#Sampling-from-an-AliasTable" aria-label="Permalink to &quot;Sampling from an AliasTable {#Sampling-from-an-AliasTable}&quot;">​</a></h2><p>Sample from an <code>AliasTable</code> the same way you would sample from any sampleable object using the Random API. For example, to draw a single sample, call <code>rand(at::AliasTable)</code>, to draw <code>n</code> samples, call <code>rand(at::AliasTable, n)</code>, to sample using a specific random number generator, call <code>rand(rng::Random.AbstractRNG, at::AliasTable)</code>, and to populate an existing array, call <code>rand!(x, at::AliasTable)</code>.</p><h2 id="Example" tabindex="-1">Example <a class="header-anchor" href="#Example" aria-label="Permalink to &quot;Example {#Example}&quot;">​</a></h2><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AliasTables</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> at </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AliasTable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AliasTable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x5000000000000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xa000000000000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x1000000000000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(at, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element Vector{Int64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div><h2 id="Implementation-details" tabindex="-1">Implementation details <a class="header-anchor" href="#Implementation-details" aria-label="Permalink to &quot;Implementation details {#Implementation-details}&quot;">​</a></h2><p>Alias tables are composed of a list of (acceptance probability, alias) pairs. To sample from an alias table, first pick an element <code>(p, alias)</code> from that list uniformly at random. Then, with probability <code>p</code>, return the index of that element and with probability <code>1-p</code>, return <code>alias</code>. For more information, see the <a href="https://en.wikipedia.org/wiki/Alias_method" target="_blank" rel="noreferrer">wikipedia article</a>, or a publication by the original author <a href="https://lilithhafner.com/An-Efficient-Method-for-Generating-Discrete-Random-Variables-with-General-Distributions.pdf" target="_blank" rel="noreferrer">Walker, A. J. &quot;An Efficient Method for Generating Discrete Random Variables with General Distributions.&quot; <em>ACM Transactions on Mathematical Software</em> 3 (3): 253, 1977.</a></p><hr><p>While this package does follow the general structure of the algorithms described in the above articles, it makes some departures for performance reasons.</p><p>Conventional alias tables map an integer in the range <code>1:n</code> and a real number to a number in the range <code>1:n</code>. This package&#39;s alias tables, however, map an integer in the range <code>0:2^k-1</code> to a number in the range <code>1:n</code>. Where <code>k = 64</code> by default. This results in increased precision and increased performance.</p><p>To apply this mapping to <code>x</code> using an alias table with <code>2^b</code> elements, we use the most significant <code>b</code> bits of <code>x</code> to index into the table, retrieving a pair <code>(p, alias)</code>. We then compare the least significant <code>k</code> bits of <code>x</code> to <code>p</code>, and if <code>x</code>&#39;s low bits are less than <code>p</code>, we return the aliased index, otherwise we return the index itself. Any finite probability distribution can be thought of as a distribution over <code>2^b</code> elements by simply appending zeros to the end of the distribution.</p><p>This whole process uses integer arithmetic which allows both very fast sampling and exact construction.</p><p>We can count exactly how many inputs map to a given output as follows.</p><p>For a given output <code>m ∈ 1:n</code>, drawn from an <code>AliasTable{UIntK}</code> with a <code>k</code>-bit domain and a range of <code>1:2^b</code>, the inputs that produce <code>m</code> come from two disjoint sets</p><ul><li><p>The integers between <code>m * 2^(k-b) + p</code>, inclusive, and <code>(m+1) * 2^(k-b)</code>, exclusive where <code>p</code> is the alias probability of the <code>m</code>th table entry. This set has <code>2^(k-b) - p</code> elements.</p></li><li><p>The integers between <code>j * 2^(k-b)</code>, inclusive and <code>j + 2^(k-b) + p_j</code>, exclusive for all <code>j</code> whose table entry aliases to <code>m</code> where <code>p_j</code> is alias probability of the <code>j</code>th table entry. This set has size <code>sum(p_j for j in 1:n if alias_j == m)</code>.</p></li></ul><p>The default constructors in this package utilize those formulae to produce alias tables that can exactly represent any distribution where all probabilities are of the form <code>p/2^k</code> for some integer <code>p</code>.</p><h2 id="Alternate-sampling-API" tabindex="-1">Alternate sampling API <a class="header-anchor" href="#Alternate-sampling-API" aria-label="Permalink to &quot;Alternate sampling API {#Alternate-sampling-API}&quot;">​</a></h2><p>You can bypass the Random API and sample directly from an <code>AliasTable</code> using the public <code>AliasTables.sample(x::T, at::AliasTable{T})</code> method which is branchless, deterministic, and not pseudorandom. If given an input drawn uniformly at random from the domain of <code>T</code>, this method will produce a sample drawn from the distribution represented by <code>at</code>.</p><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="AliasTables.sample-Union{Tuple{I}, Tuple{T}, Tuple{T, AliasTable{T, I}}} where {T, I}-index" href="#AliasTables.sample-Union{Tuple{I}, Tuple{T}, Tuple{T, AliasTable{T, I}}} where {T, I}-index">#</a> <b><u>AliasTables.sample</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, at</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AliasTable{T, I}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> I</span></span></code></pre></div><p>Sample from <code>at</code> using the seed <code>x</code>.</p><p>If <code>x</code> is chosen uniformly at random from the set of all values representable by <code>T</code> then the output will be a random sample from the distribution represented by <code>at</code>. The mapping is deterministic and not pseudo-random so for patterned input <code>x</code> the output will be patterned as well.</p><p>See also <a href="/dev/index#AliasTables.AliasTable"><code>AliasTable</code></a></p><p><a href="https://github.com/LilithHafner/AliasTables.jl/blob/c5902272e6b6f2cbaf7ca0904ae515da86e1b52d/src/AliasTables.jl#L235-L246" target="_blank" rel="noreferrer">source</a></p></div><br><h2 id="Performance-characteristics" tabindex="-1">Performance characteristics <a class="header-anchor" href="#Performance-characteristics" aria-label="Permalink to &quot;Performance characteristics {#Performance-characteristics}&quot;">​</a></h2><p>Constructing an <code>AliasTable{T}</code> is O(n) in the number of elements in the input collection, with a low constant factor. Sampling itself is O(1) with a very low constant factor. It is branchless, involves one random array read, and takes about 20 instructions more than <code>rand(T)</code>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Chairmarks</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) AliasTable</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13.250</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> μs (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allocs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 23.906</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KiB)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AliasTable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) rand</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.059</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ns</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UInt64)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.891</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ns</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AliasTable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.588</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> μs (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allocs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7.875</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KiB)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UInt64, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">606.870</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ns (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allocs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7.875</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KiB)</span></span></code></pre></div><p>Bulk generation of UInt64 has hand written llvm instructions to support simd, while alias tables don&#39;t simd as nicely and have not been as aggressively optimized; hence the difference in bulk generation time while scalar generation time is similar.</p><h2 id="Docstrings" tabindex="-1">Docstrings <a class="header-anchor" href="#Docstrings" aria-label="Permalink to &quot;Docstrings {#Docstrings}&quot;">​</a></h2><p>The docstring for the <code>AliasTable</code> constructor defines the API for constructing <code>AliasTable</code>s and the <code>AliasTables.sample</code> function provides an alternative API for sampling from <code>AliasTable</code>s, but the primary sampling API is the Random API. Alias tables may be used as a sampling domain according to the specifications layed out by the Random stdlib.</p><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="AliasTables.AliasTable" href="#AliasTables.AliasTable">#</a> <b><u>AliasTables.AliasTable</u></b> — <i>Type</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AliasTable{T&lt;:Unsigned=UInt, I&lt;:Integer=Int}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(weights</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; normalize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>An efficient data structure for sampling from a discrete distribution.</p><p>Maps every value representable by <code>T</code> to a value of type <code>I</code> in <code>eachindex(wights)</code> such that the number of values maped to a given index of <code>weights</code> is proportional to the value at that index.</p><p>The mapping can be accessed directly via <a href="/dev/index#AliasTables.sample-Union{Tuple{I}, Tuple{T}, Tuple{T, AliasTable{T, I}}} where {T, I}"><code>AliasTables.sample(x::T, at::AliasTable{T, I})</code></a> or indirectly by passing a random number generator which will be used to generate a random input of type <code>T</code> for you via <a href="/dev/index#AliasTables.sample-Tuple{Random.AbstractRNG, AliasTable}"><code>AliasTables.sample(rng::Random.AbstractRNG, at::AliasTable{T, I})</code></a> or simply via the <code>Random</code> API: <code>rand(at)</code>, <code>rand(rng, at)</code>, <code>rand(at, dims...)</code>, etc.</p><p>Set <code>normalize = false</code> for incrased performance when the weights are already normalized to sum to exactly the number of values representable by <code>T</code> (i.e. <code>typemax(T)+1</code>). A different sum will result in an error unless exactly one weight is non-zero, in which case the sum is not checked and the <code>AliasTable</code> represents a constant distribution which always produces the index of the nonzero weight.</p><p><a href="https://github.com/LilithHafner/AliasTables.jl/blob/c5902272e6b6f2cbaf7ca0904ae515da86e1b52d/src/AliasTables.jl#L22-L43" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="AliasTables.sample-Union{Tuple{I}, Tuple{T}, Tuple{T, AliasTable{T, I}}} where {T, I}" href="#AliasTables.sample-Union{Tuple{I}, Tuple{T}, Tuple{T, AliasTable{T, I}}} where {T, I}">#</a> <b><u>AliasTables.sample</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, at</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AliasTable{T, I}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> I</span></span></code></pre></div><p>Sample from <code>at</code> using the seed <code>x</code>.</p><p>If <code>x</code> is chosen uniformly at random from the set of all values representable by <code>T</code> then the output will be a random sample from the distribution represented by <code>at</code>. The mapping is deterministic and not pseudo-random so for patterned input <code>x</code> the output will be patterned as well.</p><p>See also <a href="/dev/index#AliasTables.AliasTable"><code>AliasTable</code></a></p><p><a href="https://github.com/LilithHafner/AliasTables.jl/blob/c5902272e6b6f2cbaf7ca0904ae515da86e1b52d/src/AliasTables.jl#L235-L246" target="_blank" rel="noreferrer">source</a></p></div><br><p>To be removed</p><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="AliasTables.sample-Tuple{Random.AbstractRNG, AliasTable}" href="#AliasTables.sample-Tuple{Random.AbstractRNG, AliasTable}">#</a> <b><u>AliasTables.sample</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rng</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Random.AbstractRNG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, at</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AliasTable{T, I}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> I</span></span></code></pre></div><p>Sample from <code>at</code> using randomness drawn from <code>rng</code>.</p><p>Produces a random sample from the distribution represented by <code>at</code>.</p><p>See also <a href="/dev/index#AliasTables.AliasTable"><code>AliasTable</code></a>, <code>Random.rand</code></p><p><a href="https://github.com/LilithHafner/AliasTables.jl/blob/c5902272e6b6f2cbaf7ca0904ae515da86e1b52d/src/AliasTables.jl#L258-L266" target="_blank" rel="noreferrer">source</a></p></div><br>`,37),n=[t];function h(p,r,o,d,c,k){return i(),s("div",null,n)}const m=a(l,[["render",h]]);export{g as __pageData,m as default};
