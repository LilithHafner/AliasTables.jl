var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = OffsetTables","category":"page"},{"location":"#OffsetTables","page":"Home","title":"OffsetTables","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OffsetTables.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [OffsetTables]","category":"page"},{"location":"#OffsetTables.OffsetTable","page":"Home","title":"OffsetTables.OffsetTable","text":"OffsetTable{T<:Unsigned=UInt, I<:Integer=Int}(weights::AbstractVector{<:Real}; normalize=true)\n\nAn efficient data structure for sampling from a discrete distribution.\n\nMaps every value representable by T to a value of type I in eachindex(wights) such that the number of values maped to a given index of weights is proportional to the value at that index.\n\nThe mapping can be accessed directly via OffsetTables.sample(x::T, ot::OffsetTable{T, I}) or indirectly by passing a random number generator which will be used to generate a random input of type T for you via OffsetTables.sample(rng::Random.AbstractRNG, ot::OffsetTable{T, I}) or simply via the Random API: rand(ot), rand(rng, ot), rand(ot, dims...), etc.\n\nSet normalize = false for incrased performance when the weights are already normalized to sum to exactly the number of values representable by T (i.e. typemax(T)+1). A different sum will result in an error unless exactly one weight is non-zero, in which case the sum is not checked and the OffsetTable represents a constant distribution which always produces the index of the nonzero weight.\n\n\n\n\n\n","category":"type"},{"location":"#OffsetTables.sample-Union{Tuple{I}, Tuple{T}, Tuple{Random.AbstractRNG, OffsetTable{T, I}}} where {T, I}","page":"Home","title":"OffsetTables.sample","text":"sample(rng::Random.AbstractRNG, ot::OffsetTable{T, I}) -> I\n\nSample from ot using randomness drawn from rng.\n\nProduces a random sample from the distribution represented by ot.\n\nSee also OffsetTable, Random.rand\n\n\n\n\n\n","category":"method"},{"location":"#OffsetTables.sample-Union{Tuple{I}, Tuple{T}, Tuple{T, OffsetTable{T, I}}} where {T, I}","page":"Home","title":"OffsetTables.sample","text":"sample(x::T, ot::OffsetTable{T, I}) -> I\n\nSample from ot using the seed x.\n\nIf x is chosen uniformly at random from the set of all values representable by T then the output will be a random sample from the distribution represented by ot. The mapping is deterministic and not pseudo-random so for patterned input x the output will be patterned as well.\n\nSee also OffsetTable\n\n\n\n\n\n","category":"method"}]
}
